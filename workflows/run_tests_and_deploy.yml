name: CI

on:
  push:
    branches:
      - "master"
      - "main"
    tags:
      - '*'
  pull_request:
    branches:
      - "master"
      - "main"
  schedule:
    # Nightly tests run on master by default:
    #   Scheduled workflows run on the latest commit on the default or base branch.
    #   (from https://help.github.com/en/actions/reference/events-that-trigger-workflows#scheduled-events-schedule)
    - cron: "0 0 * * 0"

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.7, 3.8, 3.9 ]

    steps:
      - uses: actions/checkout@v1
      - name: Additional info about the build
        shell: bash
        run: |
          uname -a
          df -h
          ulimit -a

      # More info on options: https://github.com/conda-incubator/setup-miniconda
      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python-version }}
          channels: conda-forge
          activate-environment: test
          auto-update-conda: false
          auto-activate-base: false
          show-channel-urls: true
          environment-file: etc/environment.yml

      - name: Install package
        # conda setup requires this special shell
        shell: bash -l {0}
        run: |
          python -m pip install .
          conda list

      - name: Run tests
        shell: bash -l {0}
        run: pytest tests/


  release:
    needs: test
    if: startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.8 ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get tag
        id: tag
        run: echo "::set-output name=version::${GITHUB_REF#refs/tags/}"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install twine
      - name: Build package
        run: python setup.py sdist bdist_wheel
      - name: Check the package
        run: twine check dist/*
      - name: Publish to PyPI
        env:
          STACKMANAGER_VERSION: ${{ github.event.release.tag_name }}
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload --skip-existing --non-interactive dist/*
